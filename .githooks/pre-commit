#!/bin/bash
# Mobility Trailblazers Pre-commit Hook
# Validates code quality before commits

echo "========================================="
echo "Running pre-commit checks..."
echo "========================================="

# Track if any check fails
FAILED=0

# 1. Check for !important declarations in CSS
echo ""
echo "1. Checking for new !important declarations in CSS..."
CSS_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.css$' || true)
if [ -n "$CSS_FILES" ]; then
    for file in $CSS_FILES; do
        # Check if file exists and has new !important declarations
        if [ -f "$file" ]; then
            NEW_IMPORTANT=$(git diff --cached "$file" | grep '^+' | grep -c '!important' || true)
            if [ "$NEW_IMPORTANT" -gt 0 ]; then
                echo "  ❌ ERROR: Found $NEW_IMPORTANT new !important declaration(s) in $file"
                echo "     Please refactor to avoid using !important"
                FAILED=1
            fi
        fi
    done
    if [ $FAILED -eq 0 ]; then
        echo "  ✓ No new !important declarations found"
    fi
else
    echo "  ⚠ No CSS files in this commit"
fi

# 2. Check for debug code in PHP files
echo ""
echo "2. Checking for debug code in PHP files..."
PHP_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.php$' || true)
if [ -n "$PHP_FILES" ]; then
    for file in $PHP_FILES; do
        if [ -f "$file" ]; then
            # Check for var_dump, print_r, die, dd
            DEBUG_CODE=$(git diff --cached "$file" | grep '^+' | grep -E 'var_dump|print_r\(|die\(|dd\(' | grep -v '//' | grep -v '#' || true)
            if [ -n "$DEBUG_CODE" ]; then
                echo "  ❌ ERROR: Debug code found in $file"
                echo "$DEBUG_CODE"
                FAILED=1
            fi
        fi
    done
    if [ $FAILED -eq 0 ]; then
        echo "  ✓ No debug code found in PHP files"
    fi
else
    echo "  ⚠ No PHP files in this commit"
fi

# 3. Check for console.log in JavaScript files
echo ""
echo "3. Checking for console.log in JavaScript files..."
JS_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(js|jsx|ts|tsx)$' || true)
if [ -n "$JS_FILES" ]; then
    for file in $JS_FILES; do
        if [ -f "$file" ]; then
            CONSOLE_LOG=$(git diff --cached "$file" | grep '^+' | grep -E 'console\.(log|error|warn|debug)' | grep -v '//' || true)
            if [ -n "$CONSOLE_LOG" ]; then
                echo "  ❌ ERROR: console statements found in $file"
                echo "$CONSOLE_LOG"
                FAILED=1
            fi
        fi
    done
    if [ $FAILED -eq 0 ]; then
        echo "  ✓ No console statements found in JavaScript files"
    fi
else
    echo "  ⚠ No JavaScript files in this commit"
fi

# 4. Check for sensitive data patterns
echo ""
echo "4. Checking for sensitive data patterns..."
ALL_FILES=$(git diff --cached --name-only --diff-filter=ACM || true)
if [ -n "$ALL_FILES" ]; then
    for file in $ALL_FILES; do
        if [ -f "$file" ]; then
            # Skip binary files and specific file types
            if file --mime-type "$file" | grep -q 'text/'; then
                # Check for potential passwords, API keys, secrets
                SENSITIVE=$(git diff --cached "$file" | grep '^+' | grep -iE 'password\s*=|api_key\s*=|secret\s*=|token\s*=' | grep -v -E '^\+\s*//' | grep -v 'password_field' | grep -v 'password_hash' || true)
                if [ -n "$SENSITIVE" ]; then
                    echo "  ⚠ WARNING: Potential sensitive data in $file"
                    echo "$SENSITIVE"
                    echo "  Please ensure no actual credentials are being committed"
                fi
            fi
        fi
    done
    echo "  ✓ Sensitive data check complete"
else
    echo "  ⚠ No files to check"
fi

# 5. PHP Syntax Check
echo ""
echo "5. Checking PHP syntax..."
if [ -n "$PHP_FILES" ]; then
    for file in $PHP_FILES; do
        if [ -f "$file" ]; then
            php -l "$file" > /dev/null 2>&1
            if [ $? -ne 0 ]; then
                echo "  ❌ ERROR: PHP syntax error in $file"
                php -l "$file"
                FAILED=1
            fi
        fi
    done
    if [ $FAILED -eq 0 ]; then
        echo "  ✓ All PHP files have valid syntax"
    fi
else
    echo "  ⚠ No PHP files to check"
fi

# 6. Check file sizes (warn for large files)
echo ""
echo "6. Checking file sizes..."
LARGE_FILES=$(git diff --cached --name-only --diff-filter=ACM | while read file; do
    if [ -f "$file" ]; then
        SIZE=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo 0)
        if [ "$SIZE" -gt 1048576 ]; then  # 1MB
            echo "$file ($(($SIZE / 1024 / 1024))MB)"
        fi
    fi
done)
if [ -n "$LARGE_FILES" ]; then
    echo "  ⚠ WARNING: Large files detected:"
    echo "$LARGE_FILES"
else
    echo "  ✓ No large files detected"
fi

# 7. Line ending check (CRLF vs LF)
echo ""
echo "7. Checking line endings..."
TEXT_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(php|js|css|html|json|md|txt|sh|yml|yaml)$' || true)
CRLF_FILES=""
if [ -n "$TEXT_FILES" ]; then
    for file in $TEXT_FILES; do
        if [ -f "$file" ]; then
            if file "$file" | grep -q "CRLF" || grep -q $'\r' "$file"; then
                CRLF_FILES="$CRLF_FILES $file"
            fi
        fi
    done
    if [ -n "$CRLF_FILES" ]; then
        echo "  ⚠ WARNING: Files with CRLF line endings detected:"
        echo "$CRLF_FILES"
        echo "  Consider converting to LF: dos2unix or git config core.autocrlf input"
    else
        echo "  ✓ All text files use LF line endings"
    fi
else
    echo "  ⚠ No text files to check"
fi

# Final result
echo ""
echo "========================================="
if [ $FAILED -eq 1 ]; then
    echo "❌ PRE-COMMIT FAILED"
    echo "Please fix the errors above before committing."
    echo "To bypass (NOT RECOMMENDED): git commit --no-verify"
    echo "========================================="
    exit 1
else
    echo "✅ PRE-COMMIT PASSED"
    echo "All checks completed successfully!"
    echo "========================================="
    exit 0
fi