#!/bin/bash

# Mobility Trailblazers Translation Validation Pre-commit Hook
# This hook validates translation files before allowing commits
# It ensures translation quality and prevents broken deployments

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
REQUIRED_PERCENTAGE=95
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

echo -e "${BLUE}========================================${NC}"
echo -e "${BLUE}Mobility Trailblazers Pre-commit Checks${NC}"
echo -e "${BLUE}========================================${NC}"

# Function to check if file is staged
is_staged() {
    git diff --cached --name-only | grep -q "$1"
}

# Function to print status
print_status() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}✓${NC} $2"
    else
        echo -e "${RED}✗${NC} $2"
        return 1
    fi
}

# Check if translation files are being modified
TRANSLATION_MODIFIED=false
if is_staged "languages/" || is_staged "*.php" || is_staged "templates/"; then
    TRANSLATION_MODIFIED=true
fi

if [ "$TRANSLATION_MODIFIED" = true ]; then
    echo -e "\n${YELLOW}Translation-related files detected in commit${NC}"
    echo "Running translation validation checks..."
    
    # 1. Check PHP syntax in staged files
    echo -e "\n${BLUE}1. Checking PHP syntax...${NC}"
    SYNTAX_ERROR=false
    for file in $(git diff --cached --name-only --diff-filter=ACM | grep '\.php$'); do
        if [ -f "$file" ]; then
            php -l "$file" > /dev/null 2>&1
            if [ $? -ne 0 ]; then
                echo -e "${RED}Syntax error in $file${NC}"
                php -l "$file"
                SYNTAX_ERROR=true
            fi
        fi
    done
    
    if [ "$SYNTAX_ERROR" = false ]; then
        print_status 0 "PHP syntax check passed"
    else
        print_status 1 "PHP syntax check failed"
        exit 1
    fi
    
    # 2. Check for debug code
    echo -e "\n${BLUE}2. Checking for debug code...${NC}"
    DEBUG_FOUND=false
    
    # Check for debug functions in PHP files
    for file in $(git diff --cached --name-only --diff-filter=ACM | grep '\.php$'); do
        if [ -f "$file" ]; then
            if grep -qE "(var_dump|print_r|die\(|dd\(|exit\()" "$file"; then
                echo -e "${RED}Debug code found in $file${NC}"
                grep -nE "(var_dump|print_r|die\(|dd\(|exit\()" "$file"
                DEBUG_FOUND=true
            fi
        fi
    done
    
    # Check for console.log in JS files
    for file in $(git diff --cached --name-only --diff-filter=ACM | grep '\.js$'); do
        if [ -f "$file" ] && [ "$file" != *".min.js" ]; then
            if grep -q "console.log" "$file"; then
                echo -e "${RED}console.log found in $file${NC}"
                grep -n "console.log" "$file"
                DEBUG_FOUND=true
            fi
        fi
    done
    
    if [ "$DEBUG_FOUND" = false ]; then
        print_status 0 "No debug code found"
    else
        print_status 1 "Debug code detected - please remove before committing"
        exit 1
    fi
    
    # 3. Validate translation files if they exist
    echo -e "\n${BLUE}3. Validating translation files...${NC}"
    
    if [ -f "$PROJECT_ROOT/languages/mobility-trailblazers-de_DE.po" ]; then
        # Check PO file syntax
        if command -v msgfmt > /dev/null 2>&1; then
            msgfmt -c -v -o /dev/null "$PROJECT_ROOT/languages/mobility-trailblazers-de_DE.po" 2>/dev/null
            if [ $? -eq 0 ]; then
                print_status 0 "PO file syntax is valid"
            else
                print_status 1 "PO file has syntax errors"
                msgfmt -c -v -o /dev/null "$PROJECT_ROOT/languages/mobility-trailblazers-de_DE.po"
                exit 1
            fi
        else
            echo -e "${YELLOW}Warning: msgfmt not found, skipping PO validation${NC}"
        fi
        
        # Check if MO file needs updating
        if [ -f "$PROJECT_ROOT/languages/mobility-trailblazers-de_DE.po" ]; then
            if [ ! -f "$PROJECT_ROOT/languages/mobility-trailblazers-de_DE.mo" ] || 
               [ "$PROJECT_ROOT/languages/mobility-trailblazers-de_DE.po" -nt "$PROJECT_ROOT/languages/mobility-trailblazers-de_DE.mo" ]; then
                echo -e "${YELLOW}MO file needs updating...${NC}"
                
                # Try to compile MO file
                if command -v msgfmt > /dev/null 2>&1; then
                    msgfmt -o "$PROJECT_ROOT/languages/mobility-trailblazers-de_DE.mo" \
                           "$PROJECT_ROOT/languages/mobility-trailblazers-de_DE.po"
                    if [ $? -eq 0 ]; then
                        git add "$PROJECT_ROOT/languages/mobility-trailblazers-de_DE.mo"
                        echo -e "${GREEN}MO file compiled and staged${NC}"
                    fi
                elif [ -f "$PROJECT_ROOT/scripts/german-translation-automation.php" ]; then
                    php "$PROJECT_ROOT/scripts/german-translation-automation.php" compile
                    if [ $? -eq 0 ]; then
                        git add "$PROJECT_ROOT/languages/mobility-trailblazers-de_DE.mo"
                        echo -e "${GREEN}MO file compiled and staged${NC}"
                    fi
                fi
            fi
        fi
    fi
    
    # 4. Check translation percentage
    echo -e "\n${BLUE}4. Checking translation coverage...${NC}"
    
    if [ -f "$PROJECT_ROOT/scripts/german-translation-automation.php" ]; then
        # Run analysis and capture output
        ANALYSIS_OUTPUT=$(php "$PROJECT_ROOT/scripts/german-translation-automation.php" analyze 2>&1)
        
        # Extract percentage
        PERCENTAGE=$(echo "$ANALYSIS_OUTPUT" | grep "Translated:" | grep -oP '\([\d.]+%' | grep -oP '[\d.]+' || echo "0")
        
        # Convert to integer for comparison
        PERCENTAGE_INT=${PERCENTAGE%.*}
        
        echo "Current translation coverage: ${PERCENTAGE}%"
        echo "Required threshold: ${REQUIRED_PERCENTAGE}%"
        
        if [ "$PERCENTAGE_INT" -lt "$REQUIRED_PERCENTAGE" ]; then
            echo -e "${YELLOW}Warning: Translation coverage (${PERCENTAGE}%) is below threshold (${REQUIRED_PERCENTAGE}%)${NC}"
            echo -e "${YELLOW}Consider translating more strings before deployment${NC}"
            
            # Show untranslated count
            UNTRANSLATED=$(echo "$ANALYSIS_OUTPUT" | grep "Untranslated:" | grep -oP '^\s*\d+' | grep -oP '\d+' || echo "0")
            if [ "$UNTRANSLATED" -gt 0 ]; then
                echo -e "${YELLOW}Untranslated strings: $UNTRANSLATED${NC}"
                echo -e "${YELLOW}Run 'php scripts/german-translation-automation.php extract' to export them${NC}"
            fi
        else
            print_status 0 "Translation coverage meets threshold"
        fi
    else
        echo -e "${YELLOW}Warning: Translation automation script not found${NC}"
    fi
    
    # 5. Check for hardcoded strings in new/modified PHP files
    echo -e "\n${BLUE}5. Checking for hardcoded strings...${NC}"
    
    HARDCODED_FOUND=false
    for file in $(git diff --cached --name-only --diff-filter=ACM | grep '\.php$'); do
        if [ -f "$file" ]; then
            # Skip language files and test files
            if [[ "$file" == *"/languages/"* ]] || [[ "$file" == *"/tests/"* ]]; then
                continue
            fi
            
            # Look for potential hardcoded strings (basic check)
            # This looks for echo/print statements with literal strings not wrapped in __()
            if grep -qE "(echo|print)[[:space:]]+['\"][^'\"]*[a-zA-Z]{3,}[^'\"]*['\"]" "$file"; then
                # Check if they're not using translation functions
                SUSPICIOUS=$(grep -nE "(echo|print)[[:space:]]+['\"][^'\"]*[a-zA-Z]{3,}[^'\"]*['\"]" "$file" | 
                            grep -v "__(" | grep -v "_e(" | grep -v "esc_html" | grep -v "esc_attr" | head -5)
                
                if [ ! -z "$SUSPICIOUS" ]; then
                    echo -e "${YELLOW}Potential hardcoded strings in $file:${NC}"
                    echo "$SUSPICIOUS"
                    HARDCODED_FOUND=true
                fi
            fi
        fi
    done
    
    if [ "$HARDCODED_FOUND" = true ]; then
        echo -e "${YELLOW}Warning: Potential hardcoded strings detected${NC}"
        echo -e "${YELLOW}Consider wrapping user-facing strings with __('string', 'mobility-trailblazers')${NC}"
    else
        print_status 0 "No obvious hardcoded strings found"
    fi
fi

# 6. Run WordPress Coding Standards check if available
if command -v phpcs > /dev/null 2>&1; then
    echo -e "\n${BLUE}6. Running WordPress Coding Standards check...${NC}"
    
    PHPCS_ERROR=false
    for file in $(git diff --cached --name-only --diff-filter=ACM | grep '\.php$'); do
        if [ -f "$file" ]; then
            phpcs --standard=WordPress --severity=1 "$file" > /dev/null 2>&1
            if [ $? -ne 0 ]; then
                echo -e "${YELLOW}WPCS issues in $file${NC}"
                PHPCS_ERROR=true
            fi
        fi
    done
    
    if [ "$PHPCS_ERROR" = false ]; then
        print_status 0 "WordPress Coding Standards check passed"
    else
        echo -e "${YELLOW}Some files have WPCS issues (non-blocking)${NC}"
    fi
fi

# 7. Check for sensitive data
echo -e "\n${BLUE}7. Checking for sensitive data...${NC}"

SENSITIVE_FOUND=false
for file in $(git diff --cached --name-only --diff-filter=ACM); do
    if [ -f "$file" ]; then
        # Check for potential passwords, API keys, etc.
        if grep -qE "(password|api_key|secret|token|private_key)[[:space:]]*=[[:space:]]*['\"][^'\"]+['\"]" "$file"; then
            echo -e "${RED}Potential sensitive data in $file${NC}"
            SENSITIVE_FOUND=true
        fi
        
        # Check for specific files that should never be committed
        basename=$(basename "$file")
        if [[ "$basename" == ".env" ]] || [[ "$basename" == "wp-config.php" ]] || 
           [[ "$basename" == *"credentials"* ]] || [[ "$basename" == *"password"* ]]; then
            echo -e "${RED}Sensitive file detected: $file${NC}"
            echo -e "${RED}This file should not be committed!${NC}"
            SENSITIVE_FOUND=true
        fi
    fi
done

if [ "$SENSITIVE_FOUND" = true ]; then
    print_status 1 "Sensitive data detected - please review before committing"
    exit 1
else
    print_status 0 "No sensitive data detected"
fi

echo -e "\n${GREEN}========================================${NC}"
echo -e "${GREEN}All pre-commit checks passed!${NC}"
echo -e "${GREEN}========================================${NC}"

# Optional: Show translation stats summary
if [ "$TRANSLATION_MODIFIED" = true ] && [ -f "$PROJECT_ROOT/scripts/german-translation-automation.php" ]; then
    echo -e "\n${BLUE}Translation Summary:${NC}"
    php "$PROJECT_ROOT/scripts/german-translation-automation.php" analyze | grep -E "(Total strings|Translated|Untranslated|percentage)"
fi

exit 0